<div class="sensor col-md-12">
  <div class="panel panel-default">
    <div class="panel-heading">
      <h3 class="panel-title">
        <span><%= device_session.device.name %></span>
        <span class="session-title-sep">/</span>
        <span>Controller <%= device_session.sensor_index + 1 %></span>
        <span class="session-title-sep">/</span>
        <span><%= device_session.name %></span>
      </h3>
      <div class='pull-right panel-controls'>
        <% if device_session.active -%>
          <span class="status-header">updated <%= time_ago_in_words(device_session.updated_at) %> ago</span>
        <% end %>
        <% if !@token_authenticated -%>
          <div class="btn-group session-controls">
            <%= link_to raw('<span class="glyphicon glyphicon-share-alt"></span>'), 
                        'javascript:;',
                        'class' => 'share-link btn btn-default btn-sm',
                        'data-toggle' => 'tooltip',
                        'title' => 'Share Session',
                        'data-content' => '<p><small>Share this link with your friends to let them check out your brew!</small></p><div class="input-group"><input type="text" class="form-control" value="' + device_session_url(@device, device_session, token: device_session.access_token) + '" readonly><span class="input-group-btn"><button class="copy-share-link btn btn-default" type="button" data-toggle="tooltip" title="copy to clipboard" data-clipboard-text="' + device_session_url(@device, device_session, token: device_session.access_token) + '"><span class="glyphicon glyphicon-link"></span></button></span></div>' %>
            <% if device_session.active -%>
              <%= link_to raw('<span class="glyphicon glyphicon-pencil"></span>'),
                          edit_device_session_path(@device, device_session),
                          class: 'btn btn-default btn-sm',
                          'data-toggle' => 'tooltip',
                          'title' => 'Edit Session' %>
              <%= link_to raw('<span class="glyphicon glyphicon-off"></span>'),
                          stop_session_device_session_path(@device, device_session),
                          method: :post,
                          class: 'btn btn-danger btn-sm',
                          data: { confirm: 'Are you sure?' },
                          'data-toggle' => 'tooltip',
                          'title' => 'Stop Session' %>
            <% else -%>
              <%= link_to raw('<span class="glyphicon glyphicon-download-alt"></span>'),
                          "/readings/#{device_session.uuid}.csv",
                          'class' => 'btn btn-default btn-sm',
                          'data-toggle' => 'tooltip',
                          'title' => 'Download CSV' %>
            <% end -%>
          </div>
        <% end %>
      </div>
    </div>
    <div class="panel-body">
      
      <% if device_session.active -%>
        <div class="row">
          <div class="col-md-3  col-sm-3 col-md-offset-1 col-sm-offset-0">
            <div class="status-header">Temperature</div>
            <div class="status-temp-value">
              <% if device_session.last_reading.nil? %>
                --.-
              <% else %>
                <%= device_session.last_reading.round(1) %>
              <% end %>
            </div>
            <div class="status-temp-scale">&deg;<%= @device.user.temperature_scale -%></div>
          </div>
          <div class="col-md-3 col-sm-3">
            <% if device_session.setpoint_type == DeviceSession::SETPOINT_TYPE[:static] %>
              <div class="status-header">Setpoint (Static)</div>
              <div class="status-temp-value">
                <% if device_session.last_setpoint.nil? %>
                  --.-
                <% else %>
                  <%= device_session.last_setpoint.round(1) %>
                <% end %>
              </div>
              <div class="status-temp-scale">&deg;<%= @device.user.temperature_scale -%></div>
            <% else %>
              <div class="status-header">Setpoint (Temp Profile)</div>
              <div class="status-temp-value">
                <% if device_session.last_setpoint.nil? %>
                  --.-
                <% else %>
                  <%= device_session.last_setpoint.round(1) %>
                <% end %>
              </div>
              <div class="status-temp-scale">&deg;<%= @device.user.temperature_scale -%></div>
              <div class="status-header"><%= device_session.temp_profile.name %></div>
            <% end %>
          </div>
          <div class="col-md-3 col-sm-3">
            <div class="status-header">Controlling</div>
            <% if device_session.output_settings.present? -%>
              <% device_session.output_settings.each do |setting| -%>
                <span class="label label-default label-lg">
                  <%= setting.index_name %> Output - <%= setting.function_name %>
                </span>&nbsp;
              <% end -%>
            <% else -%>
              <span class="label label-default label-lg">Nothing</span>
            <% end -%>
          </div>
        </div>
      <% end -%>
      
      <div id="sensor-<%= device_session.id %>-timeline" class="sensor-plot grabbable bottom-space"></div>
    </div>
  </div>
</div>

<div id="event-template" class="event-info" style="display:none">
  <div class="session-event" data-toggle="tooltip" data-placement="top" title="{{text}}"></div>
</div>

<script type='text/javascript'>
  $(document).ready(function () {
    $('[data-toggle="tooltip"]').tooltip({
      container: 'body',
      placement: 'top'
    });
    $('.share-link').popover({
        trigger: 'click',
        container: 'body',
        placement: 'top',
        show: true,
        html: true
    });
    $('.share-link').on('show.bs.popover', function () {
      $(this).tooltip('destroy');
    });
    $('.share-link').on('shown.bs.popover', function () {
      ZeroClipboard.config({
        forceHandCursor: true
      });
      var clip = new ZeroClipboard($(".copy-share-link"));
      clip.on( 'mouseover', function ( event ) {
        $('.copy-share-link').tooltip({
          container: 'body',
          placement: 'top'
        });
        $('.copy-share-link').tooltip('show');
      });
      clip.on( 'mouseout', function ( event ) {
        $('.copy-share-link').tooltip('destroy');
      });
    });
    $('.share-link').on('hide.bs.popover', function () {
      $(this).tooltip({
        container: 'body',
        placement: 'top'
      });
      $(this).tooltip('show');
    });
    
    var readings = [];
    var g = undefined;
    
    function parse_readings(data) {
      var lines = data.split("\n");
      for (var idx = 0; idx < lines.length; idx++) {
        var line = lines[idx];
        // Oftentimes there's a blank line at the end. Ignore it.
        if (line.length == 0) {
          continue;
        }
        var row = line.split(",");
        // Special processing for every row except the header.
        row[0] = new Date(parseInt(row[0])); // Turn the string date into a Date.
        for (var rowIdx = 1; rowIdx < row.length; rowIdx++) {
          // Turn "123" into 123.
          row[rowIdx] = parseFloat(row[rowIdx]);
        }
        readings.push(row);
      }
    }
    
    $.get('/readings/<%= device_session.uuid %>.csv', function(data) {
      parse_readings(data);
      make_graph();
      
      <% if device_session.active %>
      var last_pos = <%= device_session.readings_pos %>;
      function poll_session() {
        $.getJSON('<%= poll_device_session_path(@device, device_session) %>', { pos: last_pos }, function(data, status) {
          if (status == 'success') {
            last_pos = data.pos;
            if (data.reports.length > 0) {
              for (var i = 0; i < data.reports.length; i++) {
                data.reports[i][0] = new Date(data.reports[i][0]);
                readings.push(data.reports[i]);
              }
              var options = {
                file: readings,
                dateWindowLimits: [<%= device_session.created_at.to_i * 1000 %>, readings[readings.length-1][0].valueOf()],
              };

              // Update dateWindow to include new point if currently zoomed all the way out
              var dateWindow = g.getOption('dateWindow');
              var dateWindowLimits = g.getOption('dateWindowLimits');
              if ((dateWindow[0] == dateWindowLimits[0]) && (dateWindow[1] == dateWindowLimits[1])) {
                options.dateWindow = dateWindowLimits;
              }

              g.updateOptions(options);
            }
          }

          if (status != 'success' || data.active) {
            setTimeout(poll_session, 30000);
          }
        });
      }
      setTimeout(poll_session, 30000);
      <% end %>
    });
    
    function make_graph() {
    g = new Dygraph(
      document.getElementById("sensor-<%= device_session.id %>-timeline"),
      readings,
      {
        plugins: [ Dygraph.Plugins.Events, Dygraph.Plugins.ResetZoom ],
        /* rollPeriod: 10, */ // makes readings look better, but messes up setpoint transitions...
        labels: ['', 'Reading', 'Setpoint', 'Left Output', 'Right Output'],
        dateWindowLimits: [<%= device_session.created_at.to_i * 1000 %>, <%= device_session.updated_at == device_session.created_at ? (device_session.created_at + 10.minutes).to_i * 1000 : device_session.updated_at.to_i * 1000 %>],
        dateWindow: [<%= device_session.created_at.to_i * 1000 %>, <%= device_session.updated_at == device_session.created_at ? (device_session.created_at + 10.minutes).to_i * 1000 : device_session.updated_at.to_i * 1000 %>],
        labelsDivWidth: 600,
        ylabel: 'Temperature',
        legend: 'always',
        labelsSeparateLines: true,
        interactionModel : {
          'mouseenter': session_graph_mouseenter,
          'mouseleave': session_graph_mouseleave,
          'mousedown':  session_graph_mousedown,
          'mousemove':  session_graph_mousemove,
          'mouseup':    session_graph_mouseup,
          'mousewheel': session_graph_scroll,
          'DOMMouseScroll': session_graph_scroll,
          'touchstart': session_graph_touchstart,
          'touchmove': session_graph_touchmove,
          'touchend': session_graph_touchend
        },
        xValueParser: function(x) { return parseInt(x); },
        series: {
          'Left Output': { plotter: output_status_plotter, axis: 'y2' },
          'Right Output': { plotter: output_status_plotter, axis: 'y2' },
        },
        axes: {
          x: {
            axisLabelWidth: 75,
            valueFormatter: Dygraph.dateValueFormatter,
            ticker: Dygraph.dateTicker,
            axisLabelFormatter: Dygraph.dateAxisFormatter
          },
          y2: {
            valueFormatter: function(val) {
              return (val == 0) ? 'OFF' : 'ON';
            },
            drawAxis: false,
            axisLabelFormatter: function() { return ''; },
            drawHighlightPointCallback: function() {}
          },
          <% if @device.user.temperature_scale == 'C' -%>
            y: {
              valueFormatter: function(val) {
                val = ((val - 32) / 1.8);
                val = Math.round(val * 100) / 100;
                return val.toString();
              },
              ticker: function(a, b, pixels, opts, dygraph, vals) {
                // convert min/max to celsius
                a = ((a - 32) / 1.8);
                b = ((b - 32) / 1.8);

                // generate ticks
                ticks = Dygraph.numericTicks(a, b, pixels, opts, dygraph, vals);
                
                // convert tick values back to fahrenheit so that they can be placed
                // at the right location
                for (var i = 0; i < ticks.length; ++i) {
                  ticks[i].v = ((ticks[i].v * 1.8) + 32);
                }
                
                return ticks;
              }
            }
          <% end -%>
        }
      }
    );
    
    g.ready(function(g) {
      g.getPluginInstance_(Dygraph.Plugins.Events).set([
      <% device_session.session_events.each do |event| %>
        {
          xval: <%= event.created_at.to_i * 1000 %>,
          text: "<%= summarize_session_event event %>",
        },
      <% end %>
      ]);
      
      $('.session-event').tooltip({
        container: 'body',
        placement: 'top'
      });
    });
    }
  });
</script>

