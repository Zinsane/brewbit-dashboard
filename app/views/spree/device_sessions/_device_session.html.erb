<div class="sensor col-md-12">
  <div class="panel panel-default">
    <div class="panel-heading">
      <h3 class="panel-title">
        Controller <%= device_session.sensor_index + 1 %> - <%= device_session.name %>
        <span class="status-header">updated <%= time_ago_in_words(device_session.updated_at) %> ago</span>
      </h3>
      <% if device_session.active -%>
        <div class='pull-right panel-controls'>
          <%= link_to "Stop Session", stop_session_device_session_path(@device, device_session), method: :post, class: 'btn btn-danger btn-sm', data: { confirm: 'Are you sure?' } %>
        </div>
      <% end -%>
    </div>
    <div class="panel-body">
      
      <div class="row">
        <div class="col-md-3  col-sm-3 col-md-offset-1 col-sm-offset-0">
          <div class="status-header">Temperature</div>
          <div class="status-temp-value">
            <% if device_session.last_reading.nil? %>
              --.-
            <% else %>
              <%= device_session.last_reading.round(1) %>
            <% end %>
          </div>
          <div class="status-temp-scale">&deg;<%= spree_current_user.temperature_scale -%></div>
        </div>
        <div class="col-md-3 col-sm-3">
          <% if device_session.setpoint_type == DeviceSession::SETPOINT_TYPE[:static] %>
            <div class="status-header">Setpoint (Static)</div>
            <div class="status-temp-value">
              <% if device_session.last_setpoint.nil? %>
                --.-
              <% else %>
                <%= device_session.last_setpoint.round(1) %>
              <% end %>
            </div>
            <div class="status-temp-scale">&deg;<%= spree_current_user.temperature_scale -%></div>
          <% else %>
            <div class="status-header">Setpoint (Temp Profile)</div>
            <div class="status-temp-value">
              <% if device_session.last_setpoint.nil? %>
                --.-
              <% else %>
                <%= device_session.last_setpoint.round(1) %>
              <% end %>
            </div>
            <div class="status-temp-scale">&deg;<%= spree_current_user.temperature_scale -%></div>
            <div class="status-header"><%= device_session.temp_profile.name %></div>
          <% end %>
        </div>
        <div class="col-md-3 col-sm-3">
          <div class="status-header">Controlling</div>
          <% if device_session.output_settings.present? -%>
            <% device_session.output_settings.each do |setting| -%>
              <span class="label label-default label-lg">
                <%= setting.index_name %> Output - <%= setting.function_name %>
              </span>&nbsp;
            <% end -%>
          <% else -%>
            <span class="label label-default label-lg">Nothing</span>
          <% end -%>
        </div>
      </div>
      
      <div id="sensor-<%= device_session.id %>-timeline" class="sensor-plot bottom-space"></div>
    </div>
  </div>
</div>

<script type='text/javascript'>
  $(document).ready(function () {
    g = new Dygraph(
      document.getElementById("sensor-<%= device_session.id %>-timeline"),
      "/readings/<%= device_session.uuid %>.csv",
      {
        /* rollPeriod: 10, */ // makes readings look better, but messes up setpoint transitions...
        labels: ['', 'Reading', 'Setpoint'],
        labelsDivWidth: 500,
        xAxisLabelWidth: 75,
        ylabel: 'Temperature',
        showRangeSelector: true,
        legend: 'always',
        labelsDivStyles: { 'textAlign': 'right',
                           'background-color': 'rgba(0, 0, 0, 0)',
                           'text-shadow': '-2px -2px 0 #FFF, 2px -2px 0 #FFF, -2px 2px 0 #FFF, 2px 2px 0 #FFF' },
        xValueParser: function(x) { return parseInt(x); },
        axes: {
          x: {
            valueFormatter: Dygraph.dateString_,
            ticker: Dygraph.dateTicker,
            axisLabelFormatter: Dygraph.dateAxisFormatter
          },
          <% if spree_current_user.temperature_scale == 'C' -%>
            y: {
              valueFormatter: function(val) {
                val = ((val - 32) / 1.8);
                val = Math.round(val * 100) / 100;
                return val.toString();
              },
              ticker: function(a, b, pixels, opts, dygraph, vals) {
                // convert min/max to celsius
                a = ((a - 32) / 1.8);
                b = ((b - 32) / 1.8);

                // generate ticks
                ticks = Dygraph.numericTicks(a, b, pixels, opts, dygraph, vals);
                
                // convert tick values back to fahrenheit so that they can be placed
                // at the right location
                for (var i = 0; i < ticks.length; ++i) {
                  ticks[i].v = ((ticks[i].v * 1.8) + 32);
                }
                
                return ticks;
              }
            }
          <% end -%>
        }
      }
    );
  });
</script>
